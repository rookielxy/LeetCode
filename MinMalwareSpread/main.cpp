#include <iostream>
#include <vector>

using namespace std;

int minMalwareSpread(const vector<vector<int>>& graph, vector<int>& initial);
int dfs(int v, const vector<vector<int>>& graph, const vector<bool>& initialed, vector<bool>& visited);

int main() {
    vector<vector<int>> graph = {{1,0,0,0,0,0},
                                 {0,1,0,0,0,0},
                                 {0,0,1,0,0,0},
                                 {0,0,0,1,1,0},
                                 {0,0,0,1,1,0},
                                 {0,0,0,0,0,1}};
    vector<int> initial = {5, 0};
    cout << minMalwareSpread(graph, initial) << endl;
    return 0;
}


int minMalwareSpread(const vector<vector<int>>& graph, vector<int>& initial) {
    vector<bool> initialed(graph.size(), false);
    vector<int> reachNodes(graph.size(), 0);

    sort(initial.begin(), initial.end());

    for (int node : initial)
        initialed[node] = true;

    vector<bool> visited(graph.size(), false);
    for (int node : initial)
        reachNodes[node] = dfs(node, graph, initialed, visited);

    int maxNode = -1, max = -1;
    for (int node : initial) {
        if (reachNodes[node] > max) {
            maxNode = node;
            max = reachNodes[node];
        }
    }
    return maxNode;
}


int dfs(int v, const vector<vector<int>>& graph, const vector<bool>& initialed, vector<bool>& visited) {
    visited[v] = true;

    int sum = 1;
    for (int w = 0; w < graph[v].size(); ++w) {
        if (graph[v][w] == 0)
            continue;
        if (visited[w])
            continue;
        if (initialed[w]) {
            sum = 0;
            break;
        }
        sum += dfs(w, graph, initialed, visited);
    }

    visited[v] = false;
    return sum;
}