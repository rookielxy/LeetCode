#include <iostream>
#include <vector>

using namespace std;

int minMalwareSpread(const vector<vector<int>>& graph, vector<int>& initial);
int findParent(const vector<int>& parent, int node);
void unionTwoNodes(vector<int>& parent, int n1, int n2);


int main() {
    vector<vector<int>> graph = {{1, 0, 0, 0, 1, 0, 0, 0},
                                 {0, 1, 1, 0, 0, 1, 0, 0},
                                 {0, 1, 1, 0, 1, 0, 0, 0},
                                 {0, 0, 0, 1, 1, 0, 0, 0},
                                 {1, 0, 1, 1, 1, 0, 0, 1},
                                 {0, 1, 0, 0, 0, 1, 0, 0},
                                 {0, 0, 0, 0, 0, 0, 1, 1},
                                 {0, 0, 0, 0, 1, 0, 1, 1}};
    vector<int> initial = {7, 2};
    cout << minMalwareSpread(graph, initial) << endl;
    return 0;
}


int minMalwareSpread(const vector<vector<int>>& graph, vector<int>& initial) {
   sort(initial.begin(), initial.end());

    vector<int> parent(graph.size(), 0);
    for (int v = 0; v < graph.size(); ++v)
        parent[v] = v;
    for (int v = 0; v < graph.size(); ++v) {
        for (int w = v + 1; w < graph[v].size(); ++w) {
            if (graph[v][w])
                unionTwoNodes(parent, v, w);
        }
        parent[v] = findParent(parent, v);
    }

    vector<bool> initialed(graph.size(), false);
    for (int node : initial)
        initialed[node] = true;

    vector<int> setCnt(graph.size(), 0);
    for (int node : initial) {
        for (int v = 0; v < graph.size(); ++v) {
            if (parent[v] == parent[node]) {
                if (v != node and initialed[v]) {
                    setCnt[node] = 0;
                    break;
                }
                ++setCnt[node];
            }
        }
    }

    int maxNode = -1, maxValue = -1;
    for (int node : initial) {
        if (setCnt[node] > maxValue) {
            maxNode = node;
            maxValue = setCnt[node];
        }
    }
    return maxNode;
}


int findParent(const vector<int>& parent, int node) {
    int p = parent[node];
    while (p != node) {
        node = p;
        p = parent[node];
    }
    return node;
}

void unionTwoNodes(vector<int>& parent, int n1, int n2) {
    int r1 = findParent(parent, n1), r2 = findParent(parent, n2);
    if (r1 == r2)
        return;
    else if (r1 < r2)
        parent[r2] = r1;
    else
        parent[r1] = r2;
}